generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // MoneyGuy specific relations
  profile         UserProfile?
  transactions    Transaction[]
  budgets         Budget[]
  goals           Goal[]
  incomes         Income[]
  categories      Category[]
  chatHistory     ChatMessage[]
  dailyUsage      DailyUsage[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// MoneyGuy specific models
model UserProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  firstName    String?
  lastName     String?
  currency     String   @default("USD")
  timezone     String   @default("UTC")
  monthlyBudget Decimal? @db.Decimal(10, 2)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  color       String?  @default("#6B7280")
  icon        String?
  type        CategoryType @default(EXPENSE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  budgets      Budget[]

  @@unique([userId, name])
}

model Transaction {
  id          String      @id @default(cuid())
  userId      String
  categoryId  String?
  amount      Decimal     @db.Decimal(10, 2)
  description String?
  type        TransactionType
  date        DateTime    @default(now())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
}

model Budget {
  id          String   @id @default(cuid())
  userId      String
  categoryId  String?
  name        String
  amount      Decimal  @db.Decimal(10, 2)
  spent       Decimal  @db.Decimal(10, 2) @default(0)
  period      BudgetPeriod @default(MONTHLY)
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
}

model Goal {
  id            String   @id @default(cuid())
  userId        String
  title         String
  description   String?
  type          GoalType
  targetAmount  Decimal  @db.Decimal(10, 2)
  currentAmount Decimal  @db.Decimal(10, 2) @default(0)
  targetDate    DateTime?
  isCompleted   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  progress GoalProgress[]
}

model GoalProgress {
  id        String   @id @default(cuid())
  goalId    String
  amount    Decimal  @db.Decimal(10, 2)
  note      String?
  createdAt DateTime @default(now())

  goal Goal @relation(fields: [goalId], references: [id], onDelete: Cascade)
}

model Income {
  id          String      @id @default(cuid())
  userId      String
  source      String
  amount      Decimal     @db.Decimal(10, 2)
  frequency   IncomeFrequency
  description String?
  isActive    Boolean     @default(true)
  startDate   DateTime    @default(now())
  endDate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatMessage {
  id        String      @id @default(cuid())
  userId    String
  role      MessageRole
  content   String      @db.Text
  timestamp DateTime    @default(now())
  sessionId String?     // Optional: group messages by chat session

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DailyUsage {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime @default(now())
  messageCount Int   @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
}

// Enums
enum CategoryType {
  INCOME
  EXPENSE
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum BudgetPeriod {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum GoalType {
  SAVINGS
  SPENDING_LIMIT
  DEBT_PAYOFF
  INVESTMENT
}

enum IncomeFrequency {
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}